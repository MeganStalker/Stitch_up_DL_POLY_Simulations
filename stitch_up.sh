#!/bin/bash

# Script 1/1

######################
## By Megan Stalker ##
######################

# This script:

# 1.	Concatenates the output files (OUTPUT, SOLVAT, HISTORY) generated by performing a DL POLY simulation and restarted using the restart.sh script
# 2. 	Visualises an observable (the timesteps from the HISTORY file) to assist the user in determining whether the files are corrupt

##########
# A NOTE:#
##########

# Throughout this script, operations on HISTORY files are commented out as these operations are time and resource intensive. Uncomment the relevant lines (91, 119, 125) to execute operations on HISTORY files

#######################################################################################################################################################################################################################
#                                                                                                                                                                                                                     #
#                                                                                     1. STITCH UP                                                                                                                    #
#                                                                                                                                                                                                                     #
#######################################################################################################################################################################################################################

############
# CLEAN-UP #
############

# Removes any files generated by previously running this script

rm _tmp
rm timesteps

#############
# UNZIPPING #
#############

# Unzips the necessary files

gunzip */OUTPUT.gz
gunzip */STATIS.gz
gunzip */SOLVAT.gz
gunzip */HISTORY.gz

gunzip OUTPUT.gz
gunzip STATIS.gz
gunzip SOLVAT.gz
gunzip HISTORY.gz

gunzip CONTROL.gz
gunzip FIELD.gz
gunzip CONFIG.gz

#########################
# DIRECTORY ENUMERATION #
#########################

# Calculates the number of directories in the parent directory

numdir=$(ls -d */ | grep save | wc -l | awk '{ print $1 }')
#echo "numdir" $numdir
pwd

#################
# FILE RENAMING #
#################

# Renames the relevant output files (OUTPUT, SOLVAT, HISTORY) to reflect the directory that they are in
# Any loose files in the parent directory are renamed  

mv OUTPUT OUTPUT_$numdir
mv SOLVAT SOLVAT_$numdir
mv HISTORY HISTORY_$numdir

num=0
batch=0

while [ $batch -lt $numdir ]; do
        cd save$num
        pwd
       
	mv OUTPUT OUTPUT_$num 
	mv SOLVAT SOLVAT_$num
	mv HISTORY HISTORY_$num

# Concatenates the separate relevant output files (OUTPUT, SOLVAT, HISTORY) into one single output file (OUTPUT_tmp, SOLVAT_tmp, HISTORY_tmp) in the parent directory

	cat OUTPUT_$num >> ../OUTPUT_tmp
	cat SOLVAT_$num >> ../SOLVAT_tmp	
#	cat HISTORY_$num >> ../HISTORY_tmp

# Extracts the single observable (timesteps from the HISTORY file) into a separate file (timesteps_$num)

	grep "timestep" HISTORY_* | awk '{print $2}' >> timesteps_$num
	cd ..
	pwd
        (( batch++ ))
	(( num++ ))
done

# Any loose files in the parent directory are moved into a new directory (save$numdir)

fold=$(echo save$num)
echo "fold" $fold

mkdir save$numdir

for file in * .* 
do
  test -f "$file" && mv "$file" "$fold"/
done

# Extracts any files created by the script back into the parent directory

mv $fold/stitch_up.sh .
mv $fold/OUTPUT_tmp .
mv $fold/SOLVAT_tmp .
#mv $fold/HISTORY_tmp .

# Concatenates the relevant output files (OUTPUT, SOLVAT, HISTORY) which were previously loose in the parent directory into the relevant output files (OUTPUT_tmp, SOLVAT_tmp, HISTORY_tmp) in the parent directory

cat save$numdir/OUTPUT_$num >> OUTPUT_tmp
cat save$numdir/SOLVAT_$num >> SOLVAT_tmp
#cat save$numdir/HISTORY_$num >> HISTORY_tmp

#######################################################################################################################################################################################################################
#                                                                                                                                                                                                                     #
#                                                                                     2. CORRUPTION CHECK                                                                                                             #
#                                                                                                                                                                                                                     #
#######################################################################################################################################################################################################################

# Extracts the single observable (timesteps from the HISTORY file) from the file which was previously loose in the parent directory into a separate file (timesteps_$num)

grep "timestep" save$numdir/HISTORY_$num | awk '{print $2}' >> save$numdir/timesteps_$num

# Concatenates the single observable (timesteps from the HISTORY file) into a separate file (timesteps) in the parent directory 

for i in $(ls -dv save*/ ) 
do
	cat $i/timestep* >> timesteps 
done

# Plots the single observable (timesteps from the HISTORY file) using gnuplot

# Uncorrupted files will display a linear trend
# Corrupted files will display some discontinuity in the linear trend 

gnuplot --persist -e 'plot "timesteps"; pause mouse close; exit gnuplot'

# If you cannot access screen resources use the following command, as opposed to the above

#gnuplot --persist -e 'set terminal 'dumb'; plot "timesteps"; pause mouse close; exit gnuplot'
